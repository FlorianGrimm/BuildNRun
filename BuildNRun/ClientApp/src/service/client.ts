/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44319/";
    }

    /**
     * @return Success
     */
    getAktionenList(): Promise<AktionenModel> {
        let url_ = this.baseUrl + "/GetAktionenList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAktionenList(_response);
        });
    }

    protected processGetAktionenList(response: Response): Promise<AktionenModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AktionenModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AktionenModel>(<any>null);
    }

    /**
     * @return Success
     */
    getCurrentUser(): Promise<UserModel> {
        let url_ = this.baseUrl + "/GetCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: Response): Promise<UserModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserModel>(<any>null);
    }

    /**
     * @return Success
     */
    getAbstimmung(): Promise<EigeneAbstimmungenModel> {
        let url_ = this.baseUrl + "/Abstimmung";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAbstimmung(_response);
        });
    }

    protected processGetAbstimmung(response: Response): Promise<EigeneAbstimmungenModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EigeneAbstimmungenModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EigeneAbstimmungenModel>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    setAbstimmung(body: string | undefined): Promise<EigeneAbstimmungenModel> {
        let url_ = this.baseUrl + "/Abstimmung";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetAbstimmung(_response);
        });
    }

    protected processSetAbstimmung(response: Response): Promise<EigeneAbstimmungenModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EigeneAbstimmungenModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EigeneAbstimmungenModel>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    kaufAktion(body: string | undefined): Promise<UserModel> {
        let url_ = this.baseUrl + "/KaufAktion";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processKaufAktion(_response);
        });
    }

    protected processKaufAktion(response: Response): Promise<UserModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserModel>(<any>null);
    }

    /**
     * @return Success
     */
    getRouten(): Promise<RoutenModel> {
        let url_ = this.baseUrl + "/Routen";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRouten(_response);
        });
    }

    protected processGetRouten(response: Response): Promise<RoutenModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoutenModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RoutenModel>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    setRouten(body: RoutenModel | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Routen";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetRouten(_response);
        });
    }

    protected processSetRouten(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class AktionenModel implements IAktionenModel {
    readonly aktionen?: AktionModel[] | undefined;

    constructor(data?: IAktionenModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["aktionen"])) {
                (<any>this).aktionen = [] as any;
                for (let item of _data["aktionen"])
                    (<any>this).aktionen!.push(AktionModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AktionenModel {
        data = typeof data === 'object' ? data : {};
        let result = new AktionenModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.aktionen)) {
            data["aktionen"] = [];
            for (let item of this.aktionen)
                data["aktionen"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAktionenModel {
    aktionen?: AktionModel[] | undefined;
}

export class AktionModel implements IAktionModel {
    name?: string | undefined;
    level?: number;
    baumhaus?: number;
    berg?: number;
    zelt?: number;
    forAll?: boolean;

    constructor(data?: IAktionModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.level = _data["level"];
            this.baumhaus = _data["baumhaus"];
            this.berg = _data["berg"];
            this.zelt = _data["zelt"];
            this.forAll = _data["forAll"];
        }
    }

    static fromJS(data: any): AktionModel {
        data = typeof data === 'object' ? data : {};
        let result = new AktionModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["level"] = this.level;
        data["baumhaus"] = this.baumhaus;
        data["berg"] = this.berg;
        data["zelt"] = this.zelt;
        data["forAll"] = this.forAll;
        return data; 
    }
}

export interface IAktionModel {
    name?: string | undefined;
    level?: number;
    baumhaus?: number;
    berg?: number;
    zelt?: number;
    forAll?: boolean;
}

export class EigeneAbstimmungenModel implements IEigeneAbstimmungenModel {
    readonly eigeneAbstimmungen?: EigeneAbstimmungModel[] | undefined;

    constructor(data?: IEigeneAbstimmungenModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["eigeneAbstimmungen"])) {
                (<any>this).eigeneAbstimmungen = [] as any;
                for (let item of _data["eigeneAbstimmungen"])
                    (<any>this).eigeneAbstimmungen!.push(EigeneAbstimmungModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EigeneAbstimmungenModel {
        data = typeof data === 'object' ? data : {};
        let result = new EigeneAbstimmungenModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.eigeneAbstimmungen)) {
            data["eigeneAbstimmungen"] = [];
            for (let item of this.eigeneAbstimmungen)
                data["eigeneAbstimmungen"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IEigeneAbstimmungenModel {
    eigeneAbstimmungen?: EigeneAbstimmungModel[] | undefined;
}

export class EigeneAbstimmungModel implements IEigeneAbstimmungModel {
    aktion?: string | undefined;
    anzahl?: number;
    eigene?: boolean;

    constructor(data?: IEigeneAbstimmungModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.aktion = _data["aktion"];
            this.anzahl = _data["anzahl"];
            this.eigene = _data["eigene"];
        }
    }

    static fromJS(data: any): EigeneAbstimmungModel {
        data = typeof data === 'object' ? data : {};
        let result = new EigeneAbstimmungModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["aktion"] = this.aktion;
        data["anzahl"] = this.anzahl;
        data["eigene"] = this.eigene;
        return data; 
    }
}

export interface IEigeneAbstimmungModel {
    aktion?: string | undefined;
    anzahl?: number;
    eigene?: boolean;
}

export class GeoLocation implements IGeoLocation {
    latitude?: number;
    longitude?: number;

    constructor(data?: IGeoLocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
        }
    }

    static fromJS(data: any): GeoLocation {
        data = typeof data === 'object' ? data : {};
        let result = new GeoLocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        return data; 
    }
}

export interface IGeoLocation {
    latitude?: number;
    longitude?: number;
}

export class HouseModel implements IHouseModel {
    level?: number;

    constructor(data?: IHouseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.level = _data["level"];
        }
    }

    static fromJS(data: any): HouseModel {
        data = typeof data === 'object' ? data : {};
        let result = new HouseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["level"] = this.level;
        return data; 
    }
}

export interface IHouseModel {
    level?: number;
}

export class LaufRouteModel implements ILaufRouteModel {
    id?: number;
    name?: string | undefined;
    readonly wayPoints?: GeoLocation[] | undefined;

    constructor(data?: ILaufRouteModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["wayPoints"])) {
                (<any>this).wayPoints = [] as any;
                for (let item of _data["wayPoints"])
                    (<any>this).wayPoints!.push(GeoLocation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LaufRouteModel {
        data = typeof data === 'object' ? data : {};
        let result = new LaufRouteModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.wayPoints)) {
            data["wayPoints"] = [];
            for (let item of this.wayPoints)
                data["wayPoints"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ILaufRouteModel {
    id?: number;
    name?: string | undefined;
    wayPoints?: GeoLocation[] | undefined;
}

export class RoutenModel implements IRoutenModel {
    readonly routen?: LaufRouteModel[] | undefined;

    constructor(data?: IRoutenModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["routen"])) {
                (<any>this).routen = [] as any;
                for (let item of _data["routen"])
                    (<any>this).routen!.push(LaufRouteModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoutenModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoutenModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.routen)) {
            data["routen"] = [];
            for (let item of this.routen)
                data["routen"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRoutenModel {
    routen?: LaufRouteModel[] | undefined;
}

export class UserModel implements IUserModel {
    name?: string | undefined;
    money?: number;
    baumhaus?: HouseModel;
    zelt?: HouseModel;
    berg?: HouseModel;

    constructor(data?: IUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.money = _data["money"];
            this.baumhaus = _data["baumhaus"] ? HouseModel.fromJS(_data["baumhaus"]) : <any>undefined;
            this.zelt = _data["zelt"] ? HouseModel.fromJS(_data["zelt"]) : <any>undefined;
            this.berg = _data["berg"] ? HouseModel.fromJS(_data["berg"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["money"] = this.money;
        data["baumhaus"] = this.baumhaus ? this.baumhaus.toJSON() : <any>undefined;
        data["zelt"] = this.zelt ? this.zelt.toJSON() : <any>undefined;
        data["berg"] = this.berg ? this.berg.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IUserModel {
    name?: string | undefined;
    money?: number;
    baumhaus?: HouseModel;
    zelt?: HouseModel;
    berg?: HouseModel;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}